
Gasmelder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ca  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005fa  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000123  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
#include <avr/delay.h>

int flag = 0x00;

ISR (INT0_vect) //CO Kohlenstoff
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	flag= 0x01;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_2>:

ISR (INT1_vect) //Cl Chlor
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	flag= 0x02;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <__vector_18>:

ISR (INT2_vect) //Phosgen
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	flag= 0x03;
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <main>:


int main(void)
{
	//Register Definieren
	DDRB = 0x00; //INT 2 ->Eingange
  f4:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x00; //INT 0 und INT1 ->Eingange
  f6:	11 ba       	out	0x11, r1	; 17
	
	DDRC = (1<<PC7); //Melder ->Ausgang
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	84 bb       	out	0x14, r24	; 20
	
	//Interrupt Einstellung
	
	MCUCR |= (1<<ISC00) | (1<<ISC10) | (1<<ISC11)| (1<<ISC01); //Flankenwechsel
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	8f 60       	ori	r24, 0x0F	; 15
 100:	85 bf       	out	0x35, r24	; 53
	MCUCSR|= (1<<ISC2); //Steigende Flanke
 102:	84 b7       	in	r24, 0x34	; 52
 104:	80 64       	ori	r24, 0x40	; 64
 106:	84 bf       	out	0x34, r24	; 52
	GICR|= (1<<INT0) | (1<<INT1) | (1<<INT2); //Interrupt Freigabe für Ext.Interrupt
 108:	8b b7       	in	r24, 0x3b	; 59
 10a:	80 6e       	ori	r24, 0xE0	; 224
 10c:	8b bf       	out	0x3b, r24	; 59
	
	PORTC = 0x00;
 10e:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 110:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
 112:	18 ba       	out	0x18, r1	; 24
    while (1) 
    {
		switch(flag)
		{
			case 0: //Kohlenstoff Melder
				PORTC = (1<<PC7);
 114:	20 e8       	ldi	r18, 0x80	; 128
	PORTA = 0x00;
	PORTB = 0x00;
   
    while (1) 
    {
		switch(flag)
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	91 05       	cpc	r25, r1
 122:	39 f0       	breq	.+14     	; 0x132 <main+0x3e>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	91 05       	cpc	r25, r1
 128:	71 f0       	breq	.+28     	; 0x146 <main+0x52>
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	c1 f7       	brne	.-16     	; 0x11e <main+0x2a>
		{
			case 0: //Kohlenstoff Melder
				PORTC = (1<<PC7);
 12e:	25 bb       	out	0x15, r18	; 21
			break;
 130:	f2 cf       	rjmp	.-28     	; 0x116 <main+0x22>
			
			case 1: //Chlor Melder
				PORTC ^= (1<<PC7);
 132:	85 b3       	in	r24, 0x15	; 21
 134:	80 58       	subi	r24, 0x80	; 128
 136:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e4       	ldi	r24, 0x4F	; 79
 13a:	93 ec       	ldi	r25, 0xC3	; 195
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x48>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x4e>
 142:	00 00       	nop
 144:	e8 cf       	rjmp	.-48     	; 0x116 <main+0x22>
				_delay_ms(200);
			break;
			
			case 2: //Phosgen
				PORTC ^= (1<<PC7);
 146:	85 b3       	in	r24, 0x15	; 21
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	8f e4       	ldi	r24, 0x4F	; 79
 14e:	93 ec       	ldi	r25, 0xC3	; 195
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x5c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x62>
 156:	00 00       	nop
 158:	de cf       	rjmp	.-68     	; 0x116 <main+0x22>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
